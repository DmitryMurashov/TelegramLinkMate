import asyncio
from typing import Union

import teleapi
from .search import search_manager, Track, Playlist
from .search.services import yandex_music_service, youtube_service
from .utils import strip_lines


class MainExecutor(teleapi.Executor):
    async def send_search_result_message(self,
                                         message: teleapi.Message,
                                         obj: Union[Track, Playlist],
                                         max_variations: int = 5
                                         ) -> None:
        async def format_track(track: Track) -> str:
            data_source = track.data_source if track.data_source.audio_source else await track.get_data_source()

            return strip_lines(
                f"""
                üíø <em><a href="{track.url}">{track.title}</a> - {'; '.join([f'<a href="{author.url}">{author.name}</a>' for author in track.authors])}</em>
                ‚îú–í–æ—Ç <a href="{data_source.audio_source[0]}">—Å—Å—ã–ª–∫–∞</a> –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
                ‚îî{f'–í–æ—Ç <a href="{data_source.video_source[0]}">—Å—Å—ã–ª–∫–∞</a> –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ'
                if data_source.video_source else '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
                """,
                symbols=" "
            ).strip("\n")

        if isinstance(obj, Track):
            track_text = await format_track(obj)
            variations_text = "\n\n".join(list(await asyncio.gather(*[format_track(track) for track in obj.variations[:max_variations]])))

            await message.reply_photo(
                photo=obj.image_url,
                caption=f"<b>–í–æ—Ç, —á—Ç–æ —è –Ω–∞—à–µ–ª –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:</b>\n\n{track_text}\n\n{variations_text}",
                parse_mode=teleapi.ParseMode.HTML,
            )

    @teleapi.Executor.executor_command(name='youtube_search')
    async def test_command(self, message: teleapi.Message, parameters, **_) -> None:
        query = " ".join(parameters)

        if len(query) == 0:
            while True:
                # TODO: –ö–Ω–æ–ø–∞ –æ—Ç–º–µ–Ω—ã (–¥–∏–∞–ª–æ–≥–∞)
                # TODO: (teleapi) –ü—Ä–∏–¥—É–º–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–ª–æ–≥–∞
                await message.reply(
                    text="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Youtube –≤–∏–¥–µ–æ/–ø–ª–µ–π–ª–∏—Å—Ç"
                )

                _, data = await self.wait_for(
                    event_type=teleapi.UpdateEvent.ON_MESSAGE,
                    filter_=lambda _, x: x['message'].chat == message.chat
                )

                msg = data['message']

                if message.text:
                    query = msg.text
                    break

        # TODO: –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –∏–∑–º–µ–Ω—è—Ç—å —ç—Ç–æ
        # TODO: (teleapi) edit_media and other edit*
        # TODO: (teleapi) delete message
        await message.chat.send_message(
            text="<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ:</b> –ë–æ—Ç –∏—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
            parse_mode=teleapi.ParseMode.HTML
        )
        await message.chat.send_action(teleapi.ChatAction.TYPING)  # TODO: –ö–∏–¥–∞—Ç—å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫ –µ—Å–ª–∏ –±–æ—Ç –≤—Å—ë –µ—â—ë –∏—â–µ—Ç

        found = await search_manager.search(query=query, service=youtube_service)

        await self.send_search_result_message(message, found.result)

    @teleapi.Executor.executor_command(name='yandex_search')
    async def test2_command(self, message: teleapi.Message, parameters, **_) -> None:
        found = await search_manager.search(query=" ".join(parameters), service=yandex_music_service)

        await self.send_search_result_message(message, found.result)
