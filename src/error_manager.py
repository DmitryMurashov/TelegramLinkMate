import os.path
import random

import teleapi
from .exceptions.exceptions import UserError
from .utils.text import strip_lines
from teleapi.generics.http.methods.messages.send import send_media_group, send_message
import pickle


def get_error_message_text(text: str) -> str:
    return strip_lines(
        f"""
        ‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>:
        –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: <i>{text}</i>
        """
    )


def get_unknown_error_message_text() -> str:
    return strip_lines(
        """
        ‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:</b>
        –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.
        """
    )


class UnknownErrorMessageView(teleapi.View):
    def __init__(self, error_id: int, error: Exception, update: teleapi.Update) -> None:
        super().__init__()

        self.error_id = error_id
        self.error = error
        self.update = update

    @teleapi.View.view_button(text="üì¢ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", row=0)
    async def report_button(self, callback_query: teleapi.CallbackQuery, button: teleapi.InlineViewButton) -> None:
        await send_message(
            chat_id=teleapi.project_settings.OWNER_CHAT_ID,
            text=f"<b>New error report for {self.error_id} (on update {self.update.id}) from <em>{callback_query.user.username}</em></b>:\n\n<em>{str(self.error)}</em>",
            parse_mode=teleapi.ParseMode.HTML
        )

        await callback_query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –µ—ë –∏—Å–ø—Ä–∞–≤–∏—Ç—å")

        self.unregister_button(button)
        await self.message.edit_reply_markup(view=self)


class BotErrorManager(teleapi.ErrorManager):
    @teleapi.ErrorManager.manager_handler(exception_cls=UserError)
    async def user_error_handler(self, error: Exception, update: teleapi.Update, **_) -> bool:
        if not update.message:
            return False

        await update.message.reply(
            text=get_error_message_text(str(error)),
            parse_mode=teleapi.ParseMode.HTML
        )

        return True

    async def handle_unknown_error(self, error: Exception, update: teleapi.Update) -> None:
        await super().handle_unknown_error(error, update)

        error_id = random.randint(1000, 1000000)

        await send_media_group(
            chat_id=teleapi.project_settings.OWNER_CHAT_ID,
            media=[
                teleapi.InputMediaDocument(
                    data=pickle.dumps(error),
                    filename="error_object.pkl"
                ),
                teleapi.InputMediaDocument(
                    data=pickle.dumps(update),
                    filename="update_object.pkl"
                ),
                teleapi.InputMediaDocument(
                    media=os.path.join(teleapi.project_settings.PROCESS_LOG_DIR, "debug.log"),
                    filename="recent_logs.log",
                    caption=f"<b>Unknown error ({error_id}) occurred:</b>\n\n<em>{str(error)}</em>",
                    parse_mode=teleapi.ParseMode.HTML
                )
            ],
        )

        if update.message:
            view = UnknownErrorMessageView(error_id, error, update)

            await update.message.reply(
                text=get_unknown_error_message_text(),
                view=view,
                parse_mode=teleapi.ParseMode.HTML
            )
